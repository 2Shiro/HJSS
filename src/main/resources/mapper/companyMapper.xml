<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.mapper.CompanyMapper">
	<select id="getProposal">
		SELECT pro_idx, id, post_idx, resume_idx, status, TO_CHAR(created_at,
		'YY-MM-DD') FROM PERSON_PROPOSAL_TB
	</select>

	<select id="getUser">
		SELECT ID, PASSWORD, TYPE, USER_EMAIL, TO_CHAR(CREATED_DATE,
		'YYYY-MM-DD') CREATED_DATE FROM USER_TB WHERE ID = #{id}
	</select>

	<select id="getCompany" resultType="com.green.domain.CompanyVo">
		SELECT ID, CNUMBER, CNAME, COM_LOGO, CREPRESENTIVE, ADDRESS,
		MANAGER_NAME, COMPANY_MANAGERPHONE, CSIZE, TO_CHAR(TO_DATE(CYEAR),
		'YY-MM-DD') CYEAR
		FROM COMPANY_INFO_TB
		WHERE ID = #{id}
	</select>

	<select id="getCompanyById">
		SELECT ID, CNUMBER, CNAME, COM_LOGO, CREPRESENTIVE, ADDRESS,
		MANAGER_NAME, COMPANY_MANAGERPHONE, CSIZE, CYEAR
		FROM COMPANY_INFO_TB
		WHERE ID = #{id}
	</select>

	<select id="getpostList" parameterType="String"
		resultType="com.green.domain.JobpostVo">
		select * from JOB_POST_TB
		WHERE ID = #{id}
	</select>

	<insert id="insertpost" parameterType="com.green.domain.JobpostVo">
		INSERT INTO JOB_POST_TB
		(POST_IDX, ID, POST_NAME, CAREER, JOB_TYPE, PAY, GO_WORK, GO_HOME,
		DEADLINE, JOB_INTRO, C_INTRO)
		VALUES
		(#{post_idx}, #{id},
		#{post_name}, #{career}, #{job_type}, #{pay},
		#{go_work}, #{go_home}, #{deadline}, #{job_intro}, #{c_intro})
	</insert>
	<select id="viewPost" parameterType="int"
		resultType="com.green.domain.JobpostVo">
		select * from JOB_POST_TB
		WHERE POST_IDX = #{post_idx}
	</select>
	<update id="updatePost">
		UPDATE JOB_POST_TB
		SET POST_NAME = #{post_name}, CAREER = #{career}, JOB_TYPE =
		#{job_type}, PAY = #{pay}, GO_WORK = #{go_work}, GO_HOME = #{go_home},
		DEADLINE = #{deadline}, JOB_INTRO = #{job_intro}, C_INTRO = #{c_intro}
		WHERE POST_IDX = #{ post_idx }
	</update>
	<delete id="postDelete">
		DELETE FROM JOB_POST_TB WHERE POST_IDX = #{ post_idx }
	</delete>
	<insert id="insertskills" parameterType="com.green.domain.PostskillVo">
		INSERT INTO POST_SKILL_TB (csno, post_idx, skill_idx)
		VALUES ((SELECT NVL(MAX(csno),0) + 1 FROM POST_SKILL_TB), #{post_idx},
		#{skill_idx})
	</insert>
	<select id="selectpostidxmax" resultType="int">
		SELECT NVL(MAX(POST_IDX),0) + 1 FROM JOB_POST_TB
	</select>
	<delete id="deletepostskills">
		DELETE FROM POST_SKILL_TB WHERE POST_IDX = #{ post_idx }
	</delete>

	<!-- logo default값 넣을 예정 -->
	<insert id="insert">
		INSERT ALL
		INTO user_tb (id, password, type,user_email, created_date)
		VALUES(#{id},#{password},1,#{user_email},#{created_date})

		INTO company_info_tb (id,cnumber, cname, com_logo,crepresentive,
		address,
		manager_name,company_managerphone,csize,cyear)
		VALUES(#{id}, #{cnumber}, #{cname}, 'logo' , #{crepresentive},
		#{address},
		#{manager_name}, #{company_managerphone},#{csize}, #{cyear})
		SELECT * FROM DUAL
	</insert>

	<select id="login">
		SELECT id,password,type
		FROM user_tb
		WHERE id=#{arg0} AND password=#{arg1} AND type=1
	</select>

	<select id="loadskills" parameterType="int">
		select p.post_idx, p.skill_idx, s.skill_name
		from POST_SKILL_TB p, SKILL_TB s
		where p.skill_idx = s.skill_idx
		and p.post_idx = #{post_idx}
		order by p.skill_idx
	</select>

	<select id="getPersonInfoByResumeId" parameterType="String"
		resultType="com.green.domain.PersonInfoVo">
		SELECT * FROM PERSON_INFO_TB WHERE resume_id = #{resumeId}
	</select>
	<select id="recommended" resultType="com.green.domain.MatchingResultVo">
		SELECT J.post_name, J.deadline, R.id, R.title, PI.ID, PI.PNAME,
		PI.PHONE, PI.ADDRESS, PI.BIRTH,
		(SELECT LISTAGG(S.SKILL_NAME, ', ') WITHIN GROUP (ORDER BY S.SKILL_NAME)
		FROM PERSON_SKILL_TB PS
		JOIN SKILL_TB S ON PS.skill_idx = S.skill_idx
		WHERE PS.id = PI.ID) AS skills
		FROM RESUME_TB R
		JOIN PERSON_INFO_TB PI ON R.id = PI.ID
		JOIN JOB_POST_TB J ON J.post_idx = #{post_idx}
		WHERE R.id IN (
		SELECT PS.id
		FROM PERSON_SKILL_TB PS
		WHERE PS.id IN (
		SELECT PS2.id
		FROM PERSON_SKILL_TB PS2
		JOIN POST_SKILL_TB PS3 ON PS2.skill_idx = PS3.skill_idx
		WHERE PS3.POST_IDX = #{post_idx}
		GROUP BY PS2.id
		HAVING COUNT(DISTINCT PS2.skill_idx) >= (
		SELECT COUNT(DISTINCT PS3.skill_idx)
		FROM POST_SKILL_TB PS3
		WHERE PS3.POST_IDX = #{post_idx}
		)
		)
		)
		GROUP BY J.post_name, J.deadline, R.id, R.title, PI.ID, PI.PNAME,
		PI.PHONE, PI.ADDRESS, PI.BIRTH
	</select>

</mapper>